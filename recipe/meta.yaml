{% set name = "gdma" %}
{% set version = "2.3.3" %}
{% set commit = "c2e0b548" %}
{% set sha256 = "87c090b7415cd2126608019cad7a3e008c25171c7c8189adad399b6a86f8d383" %}

package:
  name: {{ name|lower }}-split
  version: {{ version }}

source:
  #url: https://github.com/psi4/gdma/archive/v2.3.3.tar.gz  # equivalent to upstream plus patches
  url: https://gitlab.com/anthonyjs/{{ name }}/-/archive/{{ commit }}.tar.bz2
  patches:
    - 0001-add-CMake-library-pymod-IO-git-avoidance.patch
  #patches:  # also equivalent to upstream plus single big patch, but c-b predicts patch levels wrong
  #  - 0001-fix-use-input-bug-build-outside-git-generalize-pytho.patch
  #  - 0002-add-IO-management-form-library-as-well-as-executable.patch
  #  - 0003-add-CMake-buildsystem-for-L-M-W-platforms.patch
  #  - 0004-add-exports-to-Python-module.patch
  #  - 0005-avoid-git-for-c-f.patch
  sha256: {{ sha256 }}

build:
  number: 0
  binary_relocation: true

outputs:
  - name: gdma
    script: build-cxx.sh                                                         # [unix]
    script: bld-cxx.bat                                                          # [win]
    build:
      run_exports:
        - {{ pin_subpackage('gdma', max_pin='x.x') }}
    requirements:
      build:
        - {{ compiler('c') }}                                                    # [unix]
        - {{ compiler('fortran') }}                                              # [unix]
        - {{ compiler('m2w64_c') }}                                              # [win]
        - {{ compiler('m2w64_fortran') }}                                        # [win]
        - cmake
        - ninja
        - python 3.10                                                                      # only for generating a source file, so suppress all but one Py version. update as necessary.
      run:
        - m2w64-gcc-libgfortran                                                  # [win]
    test:
      requires:
        - m2w64-binutils                                                         # [win]   # provides objdump.exe
      source_files:
        - examples/H2O/data
        - examples/H2O/H2O.fchk
      commands:
        - ls -l $PREFIX/lib                                                      # [unix]
        - ls -l $PREFIX/share/cmake/gdma                                         # [unix]
        - dir %PREFIX%\\Library\\lib                                             # [win]
        - dir %PREFIX%\\Library\\share\\cmake\\gdma                              # [win]
        # Verify library
        - test -f $PREFIX/lib/libgdma$SHLIB_EXT                                  # [unix]
        - test ! -f $PREFIX/lib/libgdma.a                                        # [unix]
        - if not exist %PREFIX%\\Library\\lib\\libgdma.dll.a exit 1              # [win]   # gnu import lib
        - if not exist %PREFIX%\\Library\\lib\\libgdma.lib exit 1                # [win]   # ms import lib
        - if not exist %PREFIX%\\Library\\bin\\libgdma.dll exit 1                # [win]   # gnu/ms dyn lib
        - if exist %PREFIX%\\Library\\lib\\libgdma.a exit 1                      # [win]   # gnu static lib absent
        # Verify accessories
        - test -f $PREFIX/bin/gdma                                               # [unix]
        - test -f $PREFIX/include/GDMA/GDMA_MANGLE.h                             # [unix]
        - test -f $PREFIX/share/cmake/gdma/gdmaConfig.cmake                      # [unix]
        - test -f $PREFIX/share/cmake/gdma/gdmaTargets-lib.cmake                 # [unix]
        - if not exist %PREFIX%\\Library\\bin\\gdma.exe exit 1                   # [win]
        - if not exist %PREFIX%\\Library\\include\\GDMA\\GDMA_MANGLE.h exit 1    # [win]
        - if not exist %PREFIX%\\Library\\share\\cmake\\gdma\\gdmaConfig.cmake exit 1  # [win]
        - if not exist %PREFIX%\\Library\\share\\cmake\\gdma\\gdmaTargets-lib.cmake exit 1  # [win]
        # Inspect linkage
        - ldd -v $PREFIX/lib/libgdma$SHLIB_EXT                                   # [linux]
        - otool -L $PREFIX/lib/libgdma$SHLIB_EXT                                 # [osx]
        - objdump.exe -p %PREFIX%\\Library\\bin\\libgdma.dll | findstr /i "dll"  # [win]
        # Actually test
        - cd examples/H2O/ && gdma < data                                        # [unix]
        - cd examples/H2O/ && gdma.exe < data                                    # [win]

  - name: pygdma
    script: build-py.sh                                                          # [unix]
    script: bld-py.bat                                                           # [win]
    requirements:
      build:
        - {{ compiler('cxx') }}
        - cmake
        - ninja
      host:
        - {{ pin_subpackage('gdma', exact=True) }}
        - python
        - pybind11
        - pybind11-abi
      run:
        - {{ pin_subpackage('gdma', exact=True) }}
        - python
    test:
      requires:
        - pip                                                                              # provides `pip check`
        - m2w64-binutils                                                         # [win]   # provides objdump.exe
      source_files:
        - examples/H2O/data
        - examples/H2O/H2O.fchk
      imports:
        - gdma
      commands:
        # Verify module
        - test -f $SP_DIR/gdma*.so                                               # [unix]
        - if not exist %SP_DIR%\\gdma*.pyd exit 1                                # [win]
        # Verify accessories
        - test -f $PREFIX/share/cmake/gdma/gdmaConfig.cmake                      # [unix]
        - test -f $PREFIX/share/cmake/gdma/gdmaTargets-Python.cmake              # [unix]
        - if not exist %PREFIX%\\Library\\share\\cmake\\gdma\\gdmaConfig.cmake exit 1  # [win]
        - if not exist %PREFIX%\\Library\\share\\cmake\\gdma\\gdmaTargets-Python.cmake exit 1  # [win]
        # Inspect linkage
        - ldd -v $SP_DIR/gdma*.so                                                # [linux]
        - otool -L $SP_DIR/gdma*.so                                              # [osx]
        - objdump.exe -p %SP_DIR%\\gdma.*.pyd | findstr /i "dll"                 # [win]
        # Actually test
        - pip check
        - cd examples/H2O/ && python -c "import gdma; print(gdma.__version__); gdma.run_gdma('stdout', 'data')"

about:
  home: https://www-stone.ch.cam.ac.uk/pub/gdma/
  dev_url: https://gitlab.com/anthonyjs/gdma
  doc_url: https://gitlab.com/anthonyjs/gdma/-/blob/master/doc/manual.pdf
  doc_source_url: https://gitlab.com/anthonyjs/gdma/-/tree/master/doc
  license: GPL-3.0-only
  license_url: https://opensource.org/license/gpl-3-0/
  license_file: LICENCE
  license_family: GPL
  summary: "A. J. Stone's Distributed Multipole Analysis for Gaussian wavefunctions"

extra:
  feedstock-name: gdma 
  recipe-maintainers:
    - loriab
    - davpoolechem
